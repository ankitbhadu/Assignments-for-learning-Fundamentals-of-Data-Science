# -*- coding: utf-8 -*-
"""FDS_ASS1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F6xBRogX2e0Riby7-bD1k_4YaaZFdkSl
"""

import sklearn
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

from sklearn.datasets import load_boston

house_price = load_boston()
df = pd.DataFrame(house_price.data,
                  columns = house_price.feature_names)

#checking if any data is empty
check=df.isnull()
check.sum()
#output shows no empty values

df['PRICE'] = house_price.target
df.head()

print(house_price.DESCR)

X= df.drop(axis=1,columns='PRICE')
Y= df['PRICE']
X.head()

"""Task 1: splitting the data"""

import sklearn.model_selection
X_train, X_test, Y_train, Y_test = sklearn.model_selection.train_test_split(X, Y, test_size = 0.30, random_state = 0)
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

from sklearn.linear_model import LinearRegression

OLS_model = LinearRegression(fit_intercept=True,normalize=False,copy_X=True)
OLS_model.fit(X_train, Y_train)

b_coef= OLS_model.coef_
print(b_coef[12])

B= pd.DataFrame(data=b_coef,index=X.columns)
X.columns

B.plot.bar()

"""Task2"""

print(X.shape)

df3 = pd.DataFrame(columns=['room',
                   'residential zone', 
                   'highway access'
                    ,'crime rate'
                    ,'tax'],index= range(200))
df3.head()

X_train, X_test, Y_train, Y_test = sklearn.model_selection.train_test_split(X, Y, test_size = 0.30, random_state = 0)

from sklearn.linear_model import Ridge
reg_coef_L = pd.DataFrame(columns=['crime rate',
                                   'room',
                   'residential zone', 
                   'highway access'
                    ,'tax']) 
for lamda in range(200):
  Ridge_model =Ridge(fit_intercept=True,normalize=True,copy_X=True,alpha=lamda)
  Ridge_model.fit(X_train, Y_train)
  df2 = pd.DataFrame([[Ridge_model.coef_[0],Ridge_model.coef_[5],Ridge_model.coef_[1],Ridge_model.coef_[8],Ridge_model.coef_[9]]], columns=['crime rate',
                                   'room',
                   'residential zone', 
                   'highway access'
                    ,'tax'])
  reg_coef_L=reg_coef_L.append(df2,ignore_index=True)

reg_coef_L



reg_coef_L.plot.line(figsize=(15,10))



"""Task 3"""

df4 = pd.DataFrame(columns=['room',
                   'residential zone', 
                   'highway access'
                    ,'crime rate'
                    ,'tax'],index= range(200))
df4.head()

X_train, X_test, Y_train, Y_test = sklearn.model_selection.train_test_split(X, Y, test_size = 0.30, random_state = 0)

from sklearn.linear_model import Lasso
reg_coef_Lasso = pd.DataFrame(columns=['crime rate',
                                   'room',
                   'residential zone', 
                   'highway access'
                    ,'tax']) 
Lasso_model =Lasso(fit_intercept=True,normalize=False,copy_X=True,alpha=4)
Lasso_model.fit(X_train, Y_train)
print(Lasso_model.coef_)

for lamda in range(2,200):
  Lasso_model =Lasso(fit_intercept=True,normalize=False,copy_X=True,alpha=lamda)
  Lasso_model.fit(X_train, Y_train)
  print(Lasso_model.coef_)
  df5 = pd.DataFrame([[Lasso_model.coef_[0],Lasso_model.coef_[5],Lasso_model.coef_[1],Lasso_model.coef_[8],Lasso_model.coef_[9]]], columns=['crime rate',
                                   'room',
                   'residential zone', 
                   'highway access'
                    ,'tax'])

  reg_coef_Lasso=reg_coef_Lasso.append(df5,ignore_index=True)

reg_coef_Lasso

reg_coef_Lasso.plot.line(figsize=(15,10))



"""Task 4"""

from sklearn.linear_model import LinearRegression
OLS_model =LinearRegression(fit_intercept=True,normalize=False,copy_X=True)
OLS_model.fit(X_train, Y_train)
predicted = OLS_model.predict(X_train)
predicted = predicted - Y_train
plt.scatter(range(354),predicted,c='b')
plt.show('ro')

from sklearn.linear_model import Ridge
for x in range(1,4,1):
  Ridge_model =Ridge(fit_intercept=True,normalize=False,copy_X=True,alpha=x+98*(x-1)+(x-2)*(x-1)/2)
  Ridge_model.fit(X_train, Y_train)
  predicted = Ridge_model.predict(X_train)
  predicted = predicted - Y_train
  plt.scatter(range(354),predicted,c='b')
  print('Lamda equals ')
  print(x+98*(x-1)+(x-2)*(x-1)/2)
  plt.show('ro')

from sklearn.linear_model import Lasso
for x in range(1,4,1):
  Lasso_model =Lasso(fit_intercept=True,normalize=False,copy_X=True,alpha=x+98*(x-1)+(x-2)*(x-1)/2)
  Lasso_model.fit(X_train, Y_train)
  predicted = Lasso_model.predict(X_train)
  predicted = predicted - Y_train
  plt.scatter(range(354),predicted)
  print('Lamda equals ')
  print(x+98*(x-1)+(x-2)*(x-1)/2)
  plt.show()



"""Task 5"""

from sklearn.linear_model import Ridge
print('Ridge regression')
for x in range(1,4,1):
  Ridge_model =Ridge(fit_intercept=True,normalize=False,copy_X=True,alpha=x+98*(x-1)+(x-2)*(x-1)/2)
  Ridge_model.fit(X_train, Y_train)
  predicted_train = Ridge_model.predict(X_train)
  predicted_train = predicted_train - Y_train
  predicted_train = np.square( predicted_train)
  train_error = np.sqrt(predicted_train.sum()/354)
  predicted_test = Ridge_model.predict(X_test)
  predicted_test = predicted_test - Y_test
  #predicted_test = np.abs( predicted_test)
  predicted_test = np.square(predicted_test)
  test_error = np.sqrt(predicted_test.sum()/152)

  print('Lamda equals ')
  print(x+98*(x-1)+(x-2)*(x-1)/2)
  print('Mean Training error = ', train_error)
  print('Mean Test Error = ', test_error)

print('Lasso regression')
errorL = pd.DataFrame()
from sklearn.linear_model import Lasso
for x in range(1,4,1):
  Lasso_model =Lasso(fit_intercept=True,normalize=False,copy_X=True,alpha=x+98*(x-1)+(x-2)*(x-1)/2)
  Lasso_model.fit(X_train, Y_train)
  predicted_train = Lasso_model.predict(X_train)
  predicted_train = predicted_train - Y_train
  predicted_train = np.square( predicted_train)
  train_error = np.sqrt(predicted_train.sum()/354)
  predicted_test = Lasso_model.predict(X_test)
  predicted_test = predicted_test - Y_test
  predicted_test = np.square(predicted_test)
  test_error = np.sqrt(predicted_test.sum()/152)
  errorL=errorL.append(pd.Series([x+98*(x-1)+(x-2)*(x-1)/2,train_error,test_error]),ignore_index=True)
  print('Lamda equals ')
  print(x+98*(x-1)+(x-2)*(x-1)/2)
  print('Mean Training error = ', train_error)
  print('Mean Test Error = ', test_error)
errorL

OLS_model = LinearRegression(fit_intercept=True,normalize=True,copy_X=True)
OLS_model.fit(X_train, Y_train)
predicted_train = OLS_model.predict(X_train)
predicted_train = predicted_train - Y_train
#predicted_test = np.abs( predicted_train)
predicted_train = np.square(predicted_train)
train_error = np.sqrt(predicted_train.sum()/354)
predicted_test = OLS_model.predict(X_test)
predicted_test = predicted_test - Y_test
#predicted_test = np.abs( predicted_test)
predicted_test = np.square(predicted_test)
test_error = np.sqrt(predicted_test.sum()/152)
print('OLS Regression')
print('Mean Training error = ', train_error)
print('Mean Test Error = ', test_error)





"""Analysis.(To be placed before task 1, but placed here to conserve the order of required tasks)"""

x= df['LSTAT']
y = df['PRICE']
plt.scatter(x, y, marker='o')
plt.show()
x= df['RM']
y = df['PRICE']
plt.scatter(x, y, marker='o')
plt.show()
x= df['B']
y = df['PRICE']
plt.scatter(x, y, marker='o')
plt.show()
x= df['NOX']
y = df['PRICE']
plt.scatter(x, y, marker='o')
plt.show()

